from PyQt5.QtWidgets import (QTreeWidget, QTreeWidgetItem, QMenu, QAction, 
                             QInputDialog, QMessageBox, QLineEdit, QApplication)
from PyQt5.QtCore import Qt, pyqtSignal, QMimeData
from PyQt5.QtGui import QKeyEvent, QDrag, QBrush

class SessionTreeWidget(QTreeWidget):
    context_menu_requested = pyqtSignal(str, object)
    session_double_clicked = pyqtSignal(object)
    rename_requested = pyqtSignal(str, object)
    session_moved = pyqtSignal(int, str)  # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: session_index, target_folder
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setHeaderHidden(True)
        self.setStyleSheet("""
            QTreeWidget {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 3px;
                font-size: 12px;
            }
            QTreeWidget::item {
                padding: 6px;
                height: 30px;
                border-bottom: 1px solid #f0f0f0;
            }
            QTreeWidget::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
                font-weight: bold;
            }
            QTreeWidget::item:hover {
                background-color: #f5f9ff;
                border: 1px solid #cce5ff;
            }
            QTreeWidget::item:selected:hover {
                background-color: #d1e7ff;
            }
        """)
        
        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É drag & drop
        self.setDragEnabled(True)
        self.setAcceptDrops(True)
        self.setDropIndicatorShown(True)
        self.setDragDropMode(QTreeWidget.InternalMove)
        self.setSelectionMode(QTreeWidget.SingleSelection)
        
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.on_context_menu)
        self.itemDoubleClicked.connect(self.on_item_double_clicked)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à
        self.setFocusPolicy(Qt.StrongFocus)
    
    def on_item_double_clicked(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É"""
        if item.data(0, Qt.UserRole) == "session":
            self.session_double_clicked.emit(item)
    
    def mousePressEvent(self, event):
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if event.button() == Qt.LeftButton:
            self.drag_start_position = event.pos()
        super().mousePressEvent(event)
    
    def mouseMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if not (event.buttons() & Qt.LeftButton):
            return
            
        if (event.pos() - self.drag_start_position).manhattanLength() < QApplication.startDragDistance():
            return
            
        item = self.itemAt(self.drag_start_position)
        if not item:
            return
            
        item_type = item.data(0, Qt.UserRole)
        if item_type not in ["session", "folder"]:
            return
            
        # –°–æ–∑–¥–∞–µ–º drag operation
        drag = QDrag(self)
        mime_data = QMimeData()
        
        if item_type == "session":
            session_index = item.data(0, Qt.UserRole + 1)
            mime_data.setText(f"session:{session_index}")
        else:  # folder
            folder_name = item.data(0, Qt.UserRole + 1)
            mime_data.setText(f"folder:{folder_name}")
            
        drag.setMimeData(mime_data)
        drag.exec_(Qt.MoveAction)
    
    def dragEnterEvent(self, event):
        """–†–∞–∑—Ä–µ—à–∞–µ–º drag enter"""
        if event.mimeData().hasText():
            event.acceptProposedAction()
    
    def dragMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏"""
        if event.mimeData().hasText():
            event.acceptProposedAction()
    
    def dropEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ drop"""
        if not event.mimeData().hasText():
            return
            
        mime_data = event.mimeData().text()
        target_item = self.itemAt(event.pos())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if mime_data.startswith("session:"):
            session_index = int(mime_data.split(":")[1])
            self.handle_session_drop(session_index, target_item, event.pos())
        elif mime_data.startswith("folder:"):
            folder_name = mime_data.split(":")[1]
            self.handle_folder_drop(folder_name, target_item, event.pos())
            
        event.acceptProposedAction()
    
    def handle_session_drop(self, session_index, target_item, drop_position):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ drop —Å–µ—Å—Å–∏–∏"""
        if not target_item:
            # –ë—Ä–æ—Å–∏–ª–∏ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ - —É–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–ø–∫–∏
            self.session_moved.emit(session_index, None)
            return
            
        target_type = target_item.data(0, Qt.UserRole)
        
        if target_type == "folder":
            # –ë—Ä–æ—Å–∏–ª–∏ –Ω–∞ –ø–∞–ø–∫—É - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —ç—Ç—É –ø–∞–ø–∫—É
            folder_name = target_item.data(0, Qt.UserRole + 1)
            self.session_moved.emit(session_index, folder_name)
        elif target_type == "session":
            # –ë—Ä–æ—Å–∏–ª–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å–µ—Å—Å–∏—é - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –∏–º–µ–Ω–Ω–æ
            parent = target_item.parent()
            if parent and parent.data(0, Qt.UserRole) == "folder":
                # –ë—Ä–æ—Å–∏–ª–∏ –Ω–∞ —Å–µ—Å—Å–∏—é –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —ç—Ç—É –ø–∞–ø–∫—É
                folder_name = parent.data(0, Qt.UserRole + 1)
                self.session_moved.emit(session_index, folder_name)
            else:
                # –ë—Ä–æ—Å–∏–ª–∏ –Ω–∞ —Å–µ—Å—Å–∏—é –±–µ–∑ –ø–∞–ø–∫–∏ - —É–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–ø–∫–∏
                self.session_moved.emit(session_index, None)
    
    def handle_folder_drop(self, folder_name, target_item, drop_position):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ drop –ø–∞–ø–∫–∏"""
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –Ω–µ –±—É–¥–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        pass
    
    def keyPressEvent(self, event: QKeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ F2 - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        if event.key() == Qt.Key_F2:
            item = self.currentItem()
            if item:
                item_type = item.data(0, Qt.UserRole)
                if item_type in ["folder", "session"]:
                    self.rename_requested.emit(item_type, item)
            event.accept()
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Delete - —É–¥–∞–ª–µ–Ω–∏–µ
        elif event.key() == Qt.Key_Delete:
            item = self.currentItem()
            if item:
                item_type = item.data(0, Qt.UserRole)
                if item_type == "folder":
                    self.context_menu_requested.emit("delete_folder", item)
                elif item_type == "session":
                    self.context_menu_requested.emit("delete_session", item)
            event.accept()
            return
            
        super().keyPressEvent(event)
    
    def on_context_menu(self, position):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        item = self.itemAt(position)
        menu = QMenu(self)
        
        if item:
            item_type = item.data(0, Qt.UserRole)
            if item_type == "folder":
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞–ø–∫–∏
                toggle_action = QAction("üîΩ Expand/Collapse", self)
                add_session_action = QAction("‚ûï Add Session", self)
                rename_action = QAction("‚úèÔ∏è Rename Folder", self)
                delete_folder_action = QAction("üóëÔ∏è Delete Folder", self)
                
                menu.addAction(toggle_action)
                menu.addSeparator()
                menu.addAction(add_session_action)
                menu.addAction(rename_action)
                menu.addAction(delete_folder_action)
                
                action = menu.exec_(self.mapToGlobal(position))
                
                if action == toggle_action:
                    item.setExpanded(not item.isExpanded())
                elif action == add_session_action:
                    self.context_menu_requested.emit("add_session_to_folder", item)
                elif action == rename_action:
                    self.rename_requested.emit("folder", item)
                elif action == delete_folder_action:
                    self.context_menu_requested.emit("delete_folder", item)
            else:
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–µ—Å—Å–∏–∏
                edit_action = QAction("‚úèÔ∏è Edit Session", self)
                rename_action = QAction("üìù Rename Session", self)
                move_action = QAction("‚û°Ô∏è Move to Folder", self)
                delete_action = QAction("üóëÔ∏è Delete Session", self)
                
                menu.addAction(edit_action)
                menu.addAction(rename_action)
                menu.addAction(move_action)
                menu.addAction(delete_action)
                
                action = menu.exec_(self.mapToGlobal(position))
                
                if action == edit_action:
                    self.context_menu_requested.emit("edit_session", item)
                elif action == rename_action:
                    self.rename_requested.emit("session", item)
                elif action == move_action:
                    self.context_menu_requested.emit("move_session", item)
                elif action == delete_action:
                    self.context_menu_requested.emit("delete_session", item)
        else:
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—É—Å—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
            add_folder_action = QAction("üìÅ Add Folder", self)
            add_session_action = QAction("‚ûï Add Session", self)
            
            menu.addAction(add_folder_action)
            menu.addAction(add_session_action)
            
            action = menu.exec_(self.mapToGlobal(position))
            
            if action == add_folder_action:
                self.context_menu_requested.emit("add_folder", None)
            elif action == add_session_action:
                self.context_menu_requested.emit("add_session", None)
    # –í session_tree_widget.py –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã:

    def startDrag(self, supportedActions):
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
        item = self.currentItem()
        if item:
            item.setBackground(0, QColor("#fff3cd"))  # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        super().startDrag(supportedActions)

    def dropEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ drop —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞"""
        super().dropEvent(event)
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i in range(self.topLevelItemCount()):
            item = self.topLevelItem(i)
            item.setBackground(0, QBrush())
            self.restore_item_appearance(item)
        
    def restore_item_appearance(self, item):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not item:
            return
        item.setBackground(0, QBrush())
        for i in range(item.childCount()):
            self.restore_item_appearance(item.child(i))